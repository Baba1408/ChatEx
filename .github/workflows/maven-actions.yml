# This is a basic workflow to help you get started with Actions

name: Create Releases

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  create-main-release:
    if: "startsWith(github.event.head_commit.message, 'v') && !contains(github.event.head_commit.message, '-SNAPSHOT')"
    name: Create Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3.3.0
        with:
          distribution: 'zulu'
          java-version: '8'
          java-package: jdk # optional (jdk or jre) - defaults to jdk
      - name: Cache Maven Packages
        uses: actions/cache@v3.0.4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean install
      - name: Archive jar
        run: mkdir staging && cp target/*.jar staging
      - name: upload jar
        uses: actions/upload-artifact@v3.1.0
        with:
          name: ChatEx ${{ github.event.head_commit.message }}
          path: staging
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.head_commit.message }}
          release_name: ChatEx ${{ github.event.head_commit.message }}
          body: ${{steps.github_release.outputs.changelog}}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: staging/ChatEx.jar
          asset_name: ChatEx.jar
          asset_content_type: application/java-archive
  create-pre-release:
    if: "startsWith(github.event.head_commit.message, 'v') && contains(github.event.head_commit.message, '-SNAPSHOT')"
    name: Create Pre Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up JDK 1.8
        uses: actions/setup-java@v3.3.0
        with:
          distribution: 'zulu'
          java-version: '8'
          java-package: jdk # optional (jdk or jre) - defaults to jdk
      - name: Cache Maven Packages
        uses: actions/cache@v3.0.4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn clean install
      - name: Archive jar
        run: mkdir staging && cp target/*.jar staging
      - name: upload jar
        uses: actions/upload-artifact@v3.1.0
        with:
          name: ChatEx ${{ github.event.head_commit.message }}
          path: staging
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.event.head_commit.message }}
          release_name: ChatEx ${{ github.event.head_commit.message }}
          body: ${{steps.github_release.outputs.changelog}}
          draft: false
          prerelease: true
      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path: staging/ChatEx.jar
          asset_name: ChatEx.jar
          asset_content_type: application/java-archive  
  main:
    if: "!startsWith(github.event.head_commit.message, 'v')"
    name: Create Dev Build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 1.8
      uses: actions/setup-java@v3.3.0
      with:
          distribution: 'zulu'
          java-version: '8'
          java-package: jdk # optional (jdk or jre) - defaults to jdk
    - name: Cache Maven Packages
      uses: actions/cache@v3.0.4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: Build with Maven
      run: mvn clean install
    - name: Archive jar
      run: mkdir staging && cp target/*.jar staging
    - name: upload jar
      uses: actions/upload-artifact@v1
      with:
        name: ChatEx-DEVELOPMENT-BUILD
        path: staging

